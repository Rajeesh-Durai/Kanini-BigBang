{"ast":null,"code":"var _jsxFileName = \"E:\\\\Kanini-makeYourTrip\\\\src\\\\Components\\\\ChatBot\\\\ChatBot.jsx\",\n  _s = $RefreshSig$();\n// Chatbot.js\nimport React, { useState, useEffect } from 'react';\nimport Message from './Message';\nimport './ChatBot.css';\nimport provideAction from './ActionProvider';\nimport parseMessage from './MessageParse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    // Initial greeting message from the chatbot\n    const initialGreeting = {\n      text: 'Hi! How can I help you?',\n      isUserMessage: false\n    };\n    setMessages([initialGreeting]);\n  }, []);\n  const handleUserMessage = text => {\n    const userMessage = {\n      text,\n      isUserMessage: true\n    };\n    setMessages([...messages, userMessage]);\n    const parsedMessage = parseMessage(text);\n    provideAction(parsedMessage, setMessages);\n  };\n  useEffect(() => {\n    if (scrollbarsRef.current) {\n      scrollbarsRef.current.scrollToBottom();\n    }\n  }, [messages]);\n  const scrollbarsRef = React.useRef(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: \"Tourism Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n        message: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"chatBotInput\",\n        placeholder: \"Type your message...\",\n        onKeyUp: event => {\n          if (event.key === 'Enter') {\n            handleUserMessage(event.target.value);\n            event.target.value = '';\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chatBotButtonSend\",\n        onClick: () => handleUserMessage(document.querySelector('input').value),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"omSn3ml2ZKs7fLc2uGO+aIaZWAM=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","Message","provideAction","parseMessage","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","initialGreeting","text","isUserMessage","handleUserMessage","userMessage","parsedMessage","scrollbarsRef","current","scrollToBottom","useRef","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","type","placeholder","onKeyUp","event","key","target","value","onClick","document","querySelector","_c","$RefreshReg$"],"sources":["E:/Kanini-makeYourTrip/src/Components/ChatBot/ChatBot.jsx"],"sourcesContent":["// Chatbot.js\r\nimport React, { useState, useEffect } from 'react'\r\nimport Message from './Message'\r\nimport './ChatBot.css'\r\nimport provideAction from './ActionProvider'\r\nimport parseMessage from './MessageParse'\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([])\r\n\r\n  useEffect(() => {\r\n    // Initial greeting message from the chatbot\r\n    const initialGreeting = {\r\n      text: 'Hi! How can I help you?',\r\n      isUserMessage: false,\r\n    }\r\n    setMessages([initialGreeting])\r\n  }, [])\r\n\r\n  const handleUserMessage = (text) => {\r\n    const userMessage = { text, isUserMessage: true }\r\n    setMessages([...messages, userMessage])\r\n\r\n    const parsedMessage = parseMessage(text)\r\n    provideAction(parsedMessage, setMessages)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (scrollbarsRef.current) {\r\n      scrollbarsRef.current.scrollToBottom()\r\n    }\r\n  }, [messages])\r\n\r\n  const scrollbarsRef = React.useRef(null)\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">Tourism Chatbot</div>\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((message, index) => (\r\n          <Message key={index} message={message} />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"chatBotInput\"\r\n          placeholder=\"Type your message...\"\r\n          onKeyUp={(event) => {\r\n            if (event.key === 'Enter') {\r\n              handleUserMessage(event.target.value)\r\n              event.target.value = ''\r\n            }\r\n          }}\r\n        />\r\n        <button\r\n          className=\"chatBotButtonSend\"\r\n          onClick={() =>\r\n            handleUserMessage(document.querySelector('input').value)\r\n          }\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatBot\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}