{"ast":null,"code":"// ActionProvider.js\n\n// Define a common loading response\nconst loadingResponse = {\n  text: '...',\n  isUserMessage: false\n};\nconst provideAction = (parsedMessage, setMessages) => {\n  switch (parsedMessage.type) {\n    case 'BEST_SPOTS':\n      // Show loading state before displaying the bot's response\n      setMessages(prevMessages => [...prevMessages, loadingResponse]);\n\n      // Simulate delay for loading state (you can adjust the time as needed)\n      const loadingDelay = 1000; // 1 second\n      setTimeout(() => {\n        // Here, you can fetch the actual best spots information from an API or a data source\n        const bestSpotsResponse = {\n          text: 'Sure! Here are some of the best spots in Kerala: Spot 1, Spot 2, Spot 3, etc.',\n          isUserMessage: false\n        };\n        setMessages(prevMessages => [...prevMessages.slice(0, -1), bestSpotsResponse]);\n      }, loadingDelay);\n      break;\n    case 'ANOTHER_ACTION':\n      // For other actions, you can show the same common loading state\n      setMessages(prevMessages => [...prevMessages, loadingResponse]);\n\n      // Simulate delay for loading state for another action (you can adjust the time as needed)\n      const anotherLoadingDelay = 2000; // 2 seconds\n      setTimeout(() => {\n        // Here, you can fetch the actual data for the another action from an API or a data source\n        const actualResponse = {\n          text: 'Here is the response for another action.',\n          isUserMessage: false\n        };\n        setMessages(prevMessages => [...prevMessages.slice(0, -1), actualResponse]);\n      }, anotherLoadingDelay);\n      break;\n    case 'UNKNOWN':\n      // Add a default response for unknown queries\n      const unknownResponse = {\n        text: \"I'm sorry, I couldn't understand your query.\",\n        isUserMessage: false\n      };\n      setMessages(prevMessages => [...prevMessages, unknownResponse]);\n      break;\n    default:\n      break;\n  }\n};\nexport default provideAction;","map":{"version":3,"names":["loadingResponse","text","isUserMessage","provideAction","parsedMessage","setMessages","type","prevMessages","loadingDelay","setTimeout","bestSpotsResponse","slice","anotherLoadingDelay","actualResponse","unknownResponse"],"sources":["E:/Kanini-makeYourTrip/src/Components/ChatBot/ActionProvider.jsx"],"sourcesContent":["// ActionProvider.js\r\n\r\n// Define a common loading response\r\nconst loadingResponse = {\r\n  text: '...',\r\n  isUserMessage: false,\r\n}\r\n\r\nconst provideAction = (parsedMessage, setMessages) => {\r\n  switch (parsedMessage.type) {\r\n    case 'BEST_SPOTS':\r\n      // Show loading state before displaying the bot's response\r\n      setMessages((prevMessages) => [...prevMessages, loadingResponse])\r\n\r\n      // Simulate delay for loading state (you can adjust the time as needed)\r\n      const loadingDelay = 1000 // 1 second\r\n      setTimeout(() => {\r\n        // Here, you can fetch the actual best spots information from an API or a data source\r\n        const bestSpotsResponse = {\r\n          text: 'Sure! Here are some of the best spots in Kerala: Spot 1, Spot 2, Spot 3, etc.',\r\n          isUserMessage: false,\r\n        }\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages.slice(0, -1),\r\n          bestSpotsResponse,\r\n        ])\r\n      }, loadingDelay)\r\n      break\r\n    case 'ANOTHER_ACTION':\r\n      // For other actions, you can show the same common loading state\r\n      setMessages((prevMessages) => [...prevMessages, loadingResponse])\r\n\r\n      // Simulate delay for loading state for another action (you can adjust the time as needed)\r\n      const anotherLoadingDelay = 2000 // 2 seconds\r\n      setTimeout(() => {\r\n        // Here, you can fetch the actual data for the another action from an API or a data source\r\n        const actualResponse = {\r\n          text: 'Here is the response for another action.',\r\n          isUserMessage: false,\r\n        }\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages.slice(0, -1),\r\n          actualResponse,\r\n        ])\r\n      }, anotherLoadingDelay)\r\n      break\r\n    case 'UNKNOWN':\r\n      // Add a default response for unknown queries\r\n      const unknownResponse = {\r\n        text: \"I'm sorry, I couldn't understand your query.\",\r\n        isUserMessage: false,\r\n      }\r\n      setMessages((prevMessages) => [...prevMessages, unknownResponse])\r\n      break\r\n    default:\r\n      break\r\n  }\r\n}\r\n\r\nexport default provideAction\r\n"],"mappings":"AAAA;;AAEA;AACA,MAAMA,eAAe,GAAG;EACtBC,IAAI,EAAE,KAAK;EACXC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,aAAa,GAAGA,CAACC,aAAa,EAAEC,WAAW,KAAK;EACpD,QAAQD,aAAa,CAACE,IAAI;IACxB,KAAK,YAAY;MACf;MACAD,WAAW,CAAEE,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEP,eAAe,CAAC,CAAC;;MAEjE;MACA,MAAMQ,YAAY,GAAG,IAAI,EAAC;MAC1BC,UAAU,CAAC,MAAM;QACf;QACA,MAAMC,iBAAiB,GAAG;UACxBT,IAAI,EAAE,+EAA+E;UACrFC,aAAa,EAAE;QACjB,CAAC;QACDG,WAAW,CAAEE,YAAY,IAAK,CAC5B,GAAGA,YAAY,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAC5BD,iBAAiB,CAClB,CAAC;MACJ,CAAC,EAAEF,YAAY,CAAC;MAChB;IACF,KAAK,gBAAgB;MACnB;MACAH,WAAW,CAAEE,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEP,eAAe,CAAC,CAAC;;MAEjE;MACA,MAAMY,mBAAmB,GAAG,IAAI,EAAC;MACjCH,UAAU,CAAC,MAAM;QACf;QACA,MAAMI,cAAc,GAAG;UACrBZ,IAAI,EAAE,0CAA0C;UAChDC,aAAa,EAAE;QACjB,CAAC;QACDG,WAAW,CAAEE,YAAY,IAAK,CAC5B,GAAGA,YAAY,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAC5BE,cAAc,CACf,CAAC;MACJ,CAAC,EAAED,mBAAmB,CAAC;MACvB;IACF,KAAK,SAAS;MACZ;MACA,MAAME,eAAe,GAAG;QACtBb,IAAI,EAAE,8CAA8C;QACpDC,aAAa,EAAE;MACjB,CAAC;MACDG,WAAW,CAAEE,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEO,eAAe,CAAC,CAAC;MACjE;IACF;MACE;EACJ;AACF,CAAC;AAED,eAAeX,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}